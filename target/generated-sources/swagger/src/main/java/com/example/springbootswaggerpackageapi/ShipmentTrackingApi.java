/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.springbootswaggerpackageapi;

import com.example.springbootswaggerpackageapi.Error;
import com.example.springbootswaggerpackageapi.ShipmentTracking;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "shipmentTracking", description = "the shipmentTracking API")
public interface ShipmentTrackingApi {

    @ApiOperation(value = "Retrieve tracking details of a shipment", nickname = "getShipmentTracking", notes = "", response = ShipmentTracking.class, responseContainer = "List", authorizations = {
        @Authorization(value = "accessToken"),
        @Authorization(value = "apiKey")
    }, tags={ "Shipment Tracking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShipmentTracking.class, responseContainer = "List"),
        @ApiResponse(code = 206, message = "Partial content", response = Error.class),
        @ApiResponse(code = 207, message = "Warning or info", response = Error.class),
        @ApiResponse(code = 400, message = "Bad format request", response = Error.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = Error.class),
        @ApiResponse(code = 403, message = "Not authorized", response = Error.class),
        @ApiResponse(code = 404, message = "Not found", response = Error.class),
        @ApiResponse(code = 408, message = "Request timeout", response = Error.class),
        @ApiResponse(code = 409, message = "Business rules exceptions", response = Error.class),
        @ApiResponse(code = 422, message = "Business input parameter validation error", response = Error.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class),
        @ApiResponse(code = 504, message = "Backend not available", response = Error.class) })
    @RequestMapping(value = "/shipmentTracking",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ShipmentTracking>> getShipmentTracking(@ApiParam(value = "used to send request tracking id (Spring Cloud Sleuth TraceID)" ,required=true) @RequestHeader(value="X-Request-Tracking-Id", required=true) String xRequestTrackingId,@ApiParam(value = "used to send request id (Spring Cloud Sleuth SpanID)" ,required=true) @RequestHeader(value="X-Request-Id", required=true) String xRequestId,@ApiParam(value = "used to send session id of current request id" ,required=true) @RequestHeader(value="X-Request-Session-Id", required=true) String xRequestSessionId,@ApiParam(value = "Header that contains information for Customer Segment" ) @RequestHeader(value="X-Request-Customer-Segment", required=false) String xRequestCustomerSegment,@ApiParam(value = "To retrieve the shipments tracking from a specific customer") @Valid @RequestParam(value = "customerId", required = false) String customerId,@ApiParam(value = "list of fields returned in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "Id of the order whose shipment has to be fetched") @Valid @RequestParam(value = "orderId", required = false) String orderId,@ApiParam(value = "page, positive integer, starts with 0") @Valid @RequestParam(value = "page", required = false) String page,@ApiParam(value = "RQL command") @Valid @RequestParam(value = "query", required = false) String query,@ApiParam(value = "page size, positive integer greater than 0") @Valid @RequestParam(value = "size", required = false) String size,@ApiParam(value = "data sort parameter, starts with '+' or '-' prefix; when prefix empty, '+' is default; multiple attributes can be used separated by ','") @Valid @RequestParam(value = "sort", required = false) String sort,@ApiParam(value = "Status of shipment") @Valid @RequestParam(value = "status", required = false) String status,@ApiParam(value = "The Accept request HTTP header advertises which content types, expressed as MIME types, the client is able to understand. Using content negotiation, the server then selects one of the proposals, uses it and informs the client of its choice with the Content-Type response header. Browsers set adequate values for this header depending on the context where the request is done: when fetching a CSS stylesheet a different value is set for the request than when fetching an image, video or a script." ) @RequestHeader(value="Accept", required=false) String accept,@ApiParam(value = "The Date general HTTP header contains the date and time at which the message was originated." ) @RequestHeader(value="Date", required=false) String date,@ApiParam(value = "Authentication header used to transport server apiKey or accessToken (opaque or JWT format)." ) @RequestHeader(value="X-Server-Authentication", required=false) String xServerAuthentication,@ApiParam(value = "used to send original client IP address" ) @RequestHeader(value="X-Real-IP", required=false) String xRealIP,@ApiParam(value = "used to send client version" ) @RequestHeader(value="X-Client-Version", required=false) String xClientVersion,@ApiParam(value = "used to identify which system is currently making the call" ) @RequestHeader(value="X-Client-Id", required=false) String xClientId,@ApiParam(value = "used to mark the system that actually started the call" ) @RequestHeader(value="X-Originator-Id", required=false) String xOriginatorId);


    @ApiOperation(value = "Retrieve tracking details of a shipment by tracking id", nickname = "getShipmentTrackingByTrackingId", notes = "", response = ShipmentTracking.class, authorizations = {
        @Authorization(value = "accessToken"),
        @Authorization(value = "apiKey")
    }, tags={ "Shipment Tracking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShipmentTracking.class),
        @ApiResponse(code = 206, message = "Partial content", response = Error.class),
        @ApiResponse(code = 207, message = "Warning or info", response = Error.class),
        @ApiResponse(code = 400, message = "Bad format request", response = Error.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = Error.class),
        @ApiResponse(code = 403, message = "Not authorized", response = Error.class),
        @ApiResponse(code = 404, message = "Not found", response = Error.class),
        @ApiResponse(code = 408, message = "Request timeout", response = Error.class),
        @ApiResponse(code = 409, message = "Business rules exceptions", response = Error.class),
        @ApiResponse(code = 422, message = "Business input parameter validation error", response = Error.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class),
        @ApiResponse(code = 504, message = "Backend not available", response = Error.class) })
    @RequestMapping(value = "/shipmentTracking/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ShipmentTracking> getShipmentTrackingByTrackingId(@ApiParam(value = "Id of the shipment that needs to be fetched",required=true) @PathVariable("id") String id,@ApiParam(value = "used to send request tracking id (Spring Cloud Sleuth TraceID)" ,required=true) @RequestHeader(value="X-Request-Tracking-Id", required=true) String xRequestTrackingId,@ApiParam(value = "used to send request id (Spring Cloud Sleuth SpanID)" ,required=true) @RequestHeader(value="X-Request-Id", required=true) String xRequestId,@ApiParam(value = "used to send session id of current request id" ,required=true) @RequestHeader(value="X-Request-Session-Id", required=true) String xRequestSessionId,@ApiParam(value = "list of fields returned in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "The Accept request HTTP header advertises which content types, expressed as MIME types, the client is able to understand. Using content negotiation, the server then selects one of the proposals, uses it and informs the client of its choice with the Content-Type response header. Browsers set adequate values for this header depending on the context where the request is done: when fetching a CSS stylesheet a different value is set for the request than when fetching an image, video or a script." ) @RequestHeader(value="Accept", required=false) String accept,@ApiParam(value = "The Date general HTTP header contains the date and time at which the message was originated." ) @RequestHeader(value="Date", required=false) String date,@ApiParam(value = "Authentication header used to transport server apiKey or accessToken (opaque or JWT format)." ) @RequestHeader(value="X-Server-Authentication", required=false) String xServerAuthentication,@ApiParam(value = "used to send original client IP address" ) @RequestHeader(value="X-Real-IP", required=false) String xRealIP,@ApiParam(value = "used to send client version" ) @RequestHeader(value="X-Client-Version", required=false) String xClientVersion,@ApiParam(value = "used to identify which system is currently making the call" ) @RequestHeader(value="X-Client-Id", required=false) String xClientId,@ApiParam(value = "used to mark the system that actually started the call" ) @RequestHeader(value="X-Originator-Id", required=false) String xOriginatorId);


    @ApiOperation(value = "updates ShipmentTracking", nickname = "patchShipmentTrackingUsingPATCH", notes = "", response = ShipmentTracking.class, authorizations = {
        @Authorization(value = "accessToken"),
        @Authorization(value = "apiKey")
    }, tags={ "Shipment Tracking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ShipmentTracking updated successfully", response = ShipmentTracking.class),
        @ApiResponse(code = 206, message = "Partial content", response = Error.class),
        @ApiResponse(code = 207, message = "Warning or info", response = Error.class),
        @ApiResponse(code = 400, message = "Bad format request", response = Error.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = Error.class),
        @ApiResponse(code = 403, message = "Not authorized", response = Error.class),
        @ApiResponse(code = 404, message = "Not found", response = Error.class),
        @ApiResponse(code = 408, message = "Request timeout", response = Error.class),
        @ApiResponse(code = 409, message = "Business rules exceptions", response = Error.class),
        @ApiResponse(code = 422, message = "Business input parameter validation error", response = Error.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class),
        @ApiResponse(code = 504, message = "Backend not available", response = Error.class) })
    @RequestMapping(value = "/shipmentTracking/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<ShipmentTracking> patchShipmentTrackingUsingPATCH(@ApiParam(value = "ShipmentTracking" ,required=true )  @Valid @RequestBody ShipmentTracking shipmentTracking,@NotNull @ApiParam(value = "list of fields that needs to be changed in PATCH method", required = true) @Valid @RequestParam(value = "fields", required = true) String fields,@ApiParam(value = "id",required=true) @PathVariable("id") String id,@ApiParam(value = "used to send request tracking id (Spring Cloud Sleuth TraceID)" ,required=true) @RequestHeader(value="X-Request-Tracking-Id", required=true) String xRequestTrackingId,@ApiParam(value = "used to send request id (Spring Cloud Sleuth SpanID)" ,required=true) @RequestHeader(value="X-Request-Id", required=true) String xRequestId,@ApiParam(value = "used to send session id of current request id" ,required=true) @RequestHeader(value="X-Request-Session-Id", required=true) String xRequestSessionId,@ApiParam(value = "The Accept request HTTP header advertises which content types, expressed as MIME types, the client is able to understand. Using content negotiation, the server then selects one of the proposals, uses it and informs the client of its choice with the Content-Type response header. Browsers set adequate values for this header depending on the context where the request is done: when fetching a CSS stylesheet a different value is set for the request than when fetching an image, video or a script." ) @RequestHeader(value="Accept", required=false) String accept,@ApiParam(value = "The Content-Length header indicates the size of the message body, in bytes, sent to the recipient." ) @RequestHeader(value="Content-Length", required=false) Integer contentLength,@ApiParam(value = "The Date general HTTP header contains the date and time at which the message was originated." ) @RequestHeader(value="Date", required=false) String date,@ApiParam(value = "Authentication header used to transport server apiKey or accessToken (opaque or JWT format)." ) @RequestHeader(value="X-Server-Authentication", required=false) String xServerAuthentication,@ApiParam(value = "used to send original client IP address" ) @RequestHeader(value="X-Real-IP", required=false) String xRealIP,@ApiParam(value = "used to send client version" ) @RequestHeader(value="X-Client-Version", required=false) String xClientVersion,@ApiParam(value = "used to identify which system is currently making the call" ) @RequestHeader(value="X-Client-Id", required=false) String xClientId,@ApiParam(value = "used to mark the system that actually started the call" ) @RequestHeader(value="X-Originator-Id", required=false) String xOriginatorId);


    @ApiOperation(value = "creates new ShipmentTracking", nickname = "postShipmentTracking", notes = "", response = ShipmentTracking.class, authorizations = {
        @Authorization(value = "accessToken"),
        @Authorization(value = "apiKey")
    }, tags={ "Shipment Tracking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShipmentTracking.class),
        @ApiResponse(code = 201, message = "ShipmentTracking created successfully", response = ShipmentTracking.class),
        @ApiResponse(code = 206, message = "Partial content", response = Error.class),
        @ApiResponse(code = 207, message = "Warning or info", response = Error.class),
        @ApiResponse(code = 400, message = "Bad format request", response = Error.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = Error.class),
        @ApiResponse(code = 403, message = "Not authorized", response = Error.class),
        @ApiResponse(code = 404, message = "Not found", response = Error.class),
        @ApiResponse(code = 408, message = "Request timeout", response = Error.class),
        @ApiResponse(code = 409, message = "Business rules exceptions", response = Error.class),
        @ApiResponse(code = 422, message = "Business input parameter validation error", response = Error.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class),
        @ApiResponse(code = 504, message = "Backend not available", response = Error.class) })
    @RequestMapping(value = "/shipmentTracking",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ShipmentTracking> postShipmentTracking(@ApiParam(value = "The ShipmentTracking to be created" ,required=true )  @Valid @RequestBody ShipmentTracking body,@ApiParam(value = "used to send request tracking id (Spring Cloud Sleuth TraceID)" ,required=true) @RequestHeader(value="X-Request-Tracking-Id", required=true) String xRequestTrackingId,@ApiParam(value = "used to send request id (Spring Cloud Sleuth SpanID)" ,required=true) @RequestHeader(value="X-Request-Id", required=true) String xRequestId,@ApiParam(value = "used to send session id of current request id" ,required=true) @RequestHeader(value="X-Request-Session-Id", required=true) String xRequestSessionId,@ApiParam(value = "The Accept request HTTP header advertises which content types, expressed as MIME types, the client is able to understand. Using content negotiation, the server then selects one of the proposals, uses it and informs the client of its choice with the Content-Type response header. Browsers set adequate values for this header depending on the context where the request is done: when fetching a CSS stylesheet a different value is set for the request than when fetching an image, video or a script." ) @RequestHeader(value="Accept", required=false) String accept,@ApiParam(value = "The Content-Length header indicates the size of the message body, in bytes, sent to the recipient." ) @RequestHeader(value="Content-Length", required=false) Integer contentLength,@ApiParam(value = "The Date general HTTP header contains the date and time at which the message was originated." ) @RequestHeader(value="Date", required=false) String date,@ApiParam(value = "Authentication header used to transport server apiKey or accessToken (opaque or JWT format)." ) @RequestHeader(value="X-Server-Authentication", required=false) String xServerAuthentication,@ApiParam(value = "used to send original client IP address" ) @RequestHeader(value="X-Real-IP", required=false) String xRealIP,@ApiParam(value = "used to send client version" ) @RequestHeader(value="X-Client-Version", required=false) String xClientVersion,@ApiParam(value = "used to identify which system is currently making the call" ) @RequestHeader(value="X-Client-Id", required=false) String xClientId,@ApiParam(value = "used to mark the system that actually started the call" ) @RequestHeader(value="X-Originator-Id", required=false) String xOriginatorId);

}
